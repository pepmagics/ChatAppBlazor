@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using ChatAppBlazor.Models
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Chat</h3>

<div class="message-container">
    @foreach (var message in messages)
    {
        <div class="message">
            <strong>@message.SenderUsername:</strong> @message.Content
        </div>
    }
</div>

<div class="input-container">
    <input @bind="newMessage" @onkeyup="@HandleKeyUp" placeholder="Type a message..." />
    <button @onclick="SendMessage">Send</button>
</div>

@code {
    private List<Message> messages = new List<Message>();
    private string newMessage = "";
    private HubConnection hubConnection = null!;
    private string currentUser = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add(new Message { SenderUsername = user, Content = message });
            StateHasChanged();
        });

        currentUser = await GetCurrentUser();

        await hubConnection.StartAsync();
    }

    private async Task<string> GetCurrentUser()
    {
        var response = await Http.GetAsync("api/account/currentuser");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadAsStringAsync();
        }
        return "Unknown User";
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessage))
        {
            var message = new Message
                {
                    SenderUsername = currentUser,
                    Content = newMessage,
                    Timestamp = DateTime.Now
                };

            try
            {
                var response = await Http.PostAsJsonAsync("api/message", message);
                if (response.IsSuccessStatusCode)
                {
                    await hubConnection.SendAsync("SendMessage", currentUser, newMessage);
                    newMessage = "";
                }
                else
                {
                    Console.WriteLine("Message sending failed: " + response.ReasonPhrase);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception occurred while sending message: " + ex.Message);
            }
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }
}
